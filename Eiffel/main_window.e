note
	description: "Main window for this application"
	author: "Generated by the New Vision2 Application Wizard."
	date: "$Date: 2018/5/16 13:10:8 $"
	revision: "1.0.0"

class
	MAIN_WINDOW

inherit
	EV_TITLED_WINDOW
		rename
			create_interface_objects as create_objects
		redefine
			create_objects,
			initialize,
			is_in_default_state
		end

	INTERFACE_NAMES
		export
			{NONE} all
		undefine
			default_create, copy
		end

create
	default_create

feature {ANY}
	was_new_key_pressed:BOOLEAN
	requested_stop:BOOLEAN

feature {NONE} -- variables

	Window_title: STRING = "my_vision2_application_1"

	Window_width: INTEGER
	Window_height: INTEGER

	main_container: EV_VERTICAL_BOX
	standard_toolbar: EV_TOOL_BAR
	color_dialog: EV_COLOR_DIALOG

	board_width: INTEGER
	board_height: INTEGER

	display_area: EV_PIXMAP_ADVANCED
	display_area_padding: INTEGER = 10
	current_game: separate GAME
	pixmap_buffers: HASH_TABLE[EV_PIXMAP_ADVANCED, INTEGER]
	buffer_index: INTEGER
	reset_game_button: EV_TOOL_BAR_BUTTON
	add_player_button: EV_TOOL_BAR_BUTTON
	start_game_button: EV_TOOL_BAR_BUTTON
	stop_game_button: EV_TOOL_BAR_BUTTON

	last_pressed_key: INTEGER

feature {NONE} -- Initialization

	create_objects
			-- <Precursor>
		local
			default_buffer:EV_PIXMAP_ADVANCED
		do
				-- Create main container.
			create main_container
				-- Create a toolbar.
			create standard_toolbar

			create color_dialog

			create reset_game_button
			create add_player_button
			create start_game_button
			create stop_game_button

			create display_area.make_with_size (1, 1)

			create pixmap_buffers.make (0)

			create default_buffer
			default_buffer.set_with_named_file ("images\missing_texture.png")
			default_buffer.height.do_nothing
			pixmap_buffers.put (default_buffer, 0)

			buffer_index:= 1
			board_width:= 1
			board_height:= 1
			last_pressed_key:= 0
			was_new_key_pressed:= FALSE
			requested_stop:= FALSE

			create current_game.make
		end

	initialize
			-- Build the interface for this window.
		do
			Precursor {EV_TITLED_WINDOW}
			current.maximize

			color_dialog.set_title (Dialog_select_color_title)
			color_dialog.ok_actions.extend (agent on_color_selected)
				-- Create and add the toolbar.
			main_container.extend (create {EV_HORIZONTAL_SEPARATOR})
			build_standard_toolbar
			main_container.disable_item_expand (main_container.first)
			main_container.extend (standard_toolbar)
			main_container.disable_item_expand (standard_toolbar)
			main_container.extend (create {EV_HORIZONTAL_SEPARATOR})
			main_container.disable_item_expand (main_container.last)

			build_main_container
			current.extend (main_container)
			close_request_actions.extend (agent request_close_window)
			set_title (Window_title)

				-- Set the initial size of the window.
				-- it is donw that way, because the actual size is
				-- undetermined before all containers are added,
				-- because the height of all bars on the top are unknown
				-- Especially the one with the x
				-- Also there is some margin, which makes the window also wider
			Window_width := current.width
			Window_height := current.height
			key_press_actions.extend (agent on_key_pressed)
			set_up_game(current_game)
		end

	set_up_game(a_game: separate GAME)
		--sets up the variables and launches the game
		do
			a_game.set_up (Current, board_width, board_height)
			a_game.draw_once
		end

	is_in_default_state: BOOLEAN
			-- Is the window in its default state?
			-- (as stated in `initialize')
		do
			Result := (width = Window_width) and then
				(height = Window_height) and then
				(title.is_equal (Window_title))
		end

feature {NONE} -- ToolBar Implementation

	build_standard_toolbar
		do
			add_player_button.set_text (Menu_add_player_label)
			add_player_button.select_actions.extend (agent on_add_player)
			standard_toolbar.extend(add_player_button)

			start_game_button.set_text (Menu_start_game_label)
			start_game_button.select_actions.extend (agent on_start_game)
			standard_toolbar.extend(start_game_button)

			reset_game_button.set_text(Menu_reset_game_label)
			reset_game_button.select_actions.extend (agent on_reset_game)

			stop_game_button.set_text(Menu_stop_game_label)
			stop_game_button.select_actions.extend(agent on_stop_game)
		ensure
			toolbar_initialized: not standard_toolbar.is_empty
		end

		on_add_player
			local
				warning: EV_WARNING_DIALOG
			do
				if player_count(current_game) < 2 then
					color_dialog.show_modal_to_window (current)
				else
					create warning.make_with_text (Warning_no_more_players)
					warning.show_modal_to_window (current)
				end
			end

		on_color_selected
			local
				select_name_dialog: SELECT_NAME_DIALOG
			do
				create select_name_dialog
				select_name_dialog.ok_actions.extend (agent on_name_selected)
				select_name_dialog.show_modal_to_window (current)
			end

		on_name_selected(name: STRING)
			do
				add_player(current_game, name, color_dialog.color)
			end

		add_player(game: separate GAME; name:STRING; color: EV_COLOR)
			do
				game.add_player (name, color)
				game.draw_once
			end

		on_start_game
			local
				warning: EV_WARNING_DIALOG
			do
				if player_count(current_game) > 0 then
					start_game(current_game)
					standard_toolbar.prune (add_player_button)
					standard_toolbar.prune (start_game_button)
					standard_toolbar.extend (stop_game_button)
				else
					create warning.make_with_text (Warning_no_players)
					warning.show_modal_to_window (current)
				end
			end

		start_game(game: separate GAME)
			do
				game.launch
			end

		on_reset_game
			do
				requested_stop:=FALSE
				reset_game(current_game)
				standard_toolbar.put_front (start_game_button)
				standard_toolbar.put_front (add_player_button)
				standard_toolbar.prune (reset_game_button)
			ensure
				requested_stop = FALSE
			end

		reset_game(game: separate GAME)
			do
				game.reset_game
			end

		on_stop_game
			do
				requested_stop:=TRUE
			end

feature {NONE} -- Implementation, Close event

	request_close_window
			-- Process user request to close the window.
		local
			question_dialog: EV_CONFIRMATION_DIALOG
		do
			create question_dialog.make_with_text (Label_confirm_close_window)
			question_dialog.show_modal_to_window (Current)

			if question_dialog.selected_button ~ (create {EV_DIALOG_CONSTANTS}).ev_ok then
					-- Destroy the window.
				destroy

					-- End the application.
				if attached (create {EV_ENVIRONMENT}).application as a then
					a.destroy
				end
			end
		end

feature {NONE} -- Implementation

	build_main_container
			-- Populate `main_container'.
		local
			drawing_area_container: EV_VERTICAL_BOX
		do
			create drawing_area_container.default_create

			drawing_area_container.set_minimum_size (current.client_width, current.client_height - main_container.height)
			drawing_area_container.set_padding (display_area_padding)
			drawing_area_container.set_background_color (create {EV_COLOR}.make_with_rgb(0,0,0))

			board_width:= current.client_width - display_area_padding * 2
			board_height:= current.client_height - main_container.height - display_area_padding * 2
			display_area.reset_for_buffering (board_width, board_height)
			drawing_area_container.extend (display_area)

			main_container.extend (drawing_area_container)
		ensure
			main_container_created: main_container /= Void
		end

feature {NONE} -- user input

	on_key_pressed(key:EV_KEY)
		do
			last_pressed_key:=key.code
			was_new_key_pressed:=TRUE
		end

	press_mouse_button(x: INTEGER_32; y: INTEGER_32; button: INTEGER_32; x_tilt: REAL_64; y_tilt: REAL_64; pressure: REAL_64; x_screen: INTEGER_32; y_screen: INTEGER_32)
		do
			display_area.set_foreground_color(create {EV_COLOR}.make_with_rgb(0,0,1))
			display_area.fill_rectangle (x, y, 10, 10)
			print("Button :: " + button.out + "%N")
		end

feature {ANY}-- interfaces for GAME

	create_pixmap_buffer(a_width, a_height: INTEGER_32):INTEGER
	-- creates a buffer and returns the index
		local
			buffer: EV_PIXMAP_ADVANCED
		do
			from
			until
				pixmap_buffers.at (buffer_index) = void
			loop
				buffer_index := buffer_index + 1
			end
			create buffer.make_with_size (a_width, a_height)
			pixmap_buffers.put (buffer, buffer_index)
			RESULT:=buffer_index
		end

	create_pixmap_buffer_from_image(image: separate READABLE_STRING_8):INTEGER
	-- creates a buffer from an image
		local
			buffer: EV_PIXMAP_ADVANCED
			path_to_image: STRING
		do
			from
			until
				pixmap_buffers.at (buffer_index) = void
			loop
				buffer_index := buffer_index + 1
			end
			create buffer
			create path_to_image.make_from_separate (image)
			buffer.set_with_named_file (path_to_image)
			buffer.height.do_nothing
			pixmap_buffers.put (buffer, buffer_index)
			RESULT:=buffer_index
		end

	set_mask(index_target, index_mask:INTEGER)
		require
			is_valid_buffer_index(index_target)
			is_valid_buffer_index(index_mask)
		local
			bitmap:EV_BITMAP
		do
			if attached get_pixmap_buffer(index_target) as target and
			attached get_pixmap_buffer(index_mask) as mask then

				create bitmap.make_with_size (target.width, target.height)
				bitmap.draw_pixmap (0, 0, mask)
				target.set_mask(bitmap)
			end
		end

	draw_buffer_to_display(index: INTEGER; pos_x, pos_y: INTEGER)
	-- draws a buffer at top left position pos
		do
			if attached get_pixmap_buffer(index) as buffer then
				display_area.draw_pixmap (pos_x, pos_y, buffer)
			else
				print(index.out + " buffer not existing in draw buffer")
			end
		end


	get_pixmap_buffer(index:INTEGER):detachable EV_PIXMAP_ADVANCED
	-- returns a buffer if it exists otherwhise void
		do
			RESULT:=pixmap_buffers.at (index)
		end

	is_valid_buffer_index(index:INTEGER):BOOLEAN
		do
			if attached pixmap_buffers.at (index) then
				RESULT:= TRUE
			else
				RESULT:= FALSE
			end
		end

	get_last_pressed_key:INTEGER
		do
			was_new_key_pressed:=FALSE
			RESULT:=last_pressed_key
		end

	display_win_message(name: separate STRING)
		local
			win_dialog: EV_INFORMATION_DIALOG
		do
			create win_dialog.make_with_text ("Player: " + create{STRING}.make_from_separate (name) + " has won the game!!!")
			win_dialog.set_minimum_width (300)
			win_dialog.show_modal_to_window (current)
			standard_toolbar.prune(stop_game_button)
			standard_toolbar.extend (reset_game_button)
		end

	has_requested_stop:BOOLEAN
		do
			RESULT:=requested_stop
			requested_stop:=FALSE
		end

	player_count(game: separate GAME):INTEGER
		do
			RESULT:=game.player_count
		end

end
